// import java.util.*;

/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 */
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph.length == 0) {
            return 0;
        }
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        int[] count = new int[n];
        int[] countRoot = new int[n];
        for (int i : initial) {
            countRoot[uf.find(i)]++;
        }
        for (int i = 0; i < n; i++) {
            count[uf.find(i)]++;
        }
        int ans = -1;
        int ansBackup = -1;
        for(int i:initial){
            if(countRoot[uf.find(i)] == 1){
                if(ans != -1){
                    if(count[uf.find(ans)] < count[uf.find(i)]){
                        ans = i;
                    }else if(count[uf.find(ans)] == count[uf.find(i)]){
                        ans = Math.min(i, ans);
                    }
                }else{
                    ans = i;
                }
            }else{
                ansBackup = ansBackup == -1 ? i : Math.min(ansBackup, i);
            }
        }
        if(ans > -1 && count[uf.find(ans)] == 1){
            return ansBackup == -1 ? ans : Math.min(ans, ansBackup);
        }else if(ans > -1){
            return ans;
        }else{
            return ansBackup;
        }
    }

    public class UnionFind {
        int[] parent;

        public UnionFind(int n) {
            parent = new int[n];
            for (int i = 0; i < parent.length; i++) {
                parent[i] = i;
            }
        }

        public int find(int x) {
            if (parent[x] == x) {
                return x;
            }
            parent[x] = find(parent[x]);
            return parent[x];
        }

        public int union(int x, int y) {
            int fx = find(x);
            int fy = find(y);
            parent[fx] = fy;
            return fy;
        }
    }
}